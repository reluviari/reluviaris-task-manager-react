{"version":3,"sources":["../../build_10053400d22c1cc204dc80ed41a496f3/src/components/header/Header.js","../../build_10053400d22c1cc204dc80ed41a496f3/src/components/tasks/list/List.js","../../build_10053400d22c1cc204dc80ed41a496f3/src/components/tasks/create_tasks/CreateTasks.js","../../build_10053400d22c1cc204dc80ed41a496f3/src/components/tasks/Tasks.js","../../build_10053400d22c1cc204dc80ed41a496f3/src/App.js","../../build_10053400d22c1cc204dc80ed41a496f3/src/serviceWorker.js","../../build_10053400d22c1cc204dc80ed41a496f3/src/index.js"],"names":["Header","react_default","a","createElement","Navbar_default","Brand","react_fontawesome_index_es","icon","size","Component","List","task","window","confirm","concat","title","fetch","id","method","this","props","loadTasks","done","headers","Accept","Content-Type","body","JSON","stringify","_this","Card_default","Body","Table_default","responsive","tasks","map","index","key","className","href","onClick","checkTask","deleteTask","CreateTask","_useState","useState","_useState2","Object","slicedToArray","setTitle","_useState3","_useState4","show","setShow","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","Button_default","e","variant","Modal_default","onHide","closeButton","Title","Form_default","Control","type","placeholder","value","onChange","target","Footer","onSubmit","Tasks","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","response","json","setState","Row_default","Col_default","xs","span","offset","list_List","filter","CreateTasks","library","add","faCheckCircle","faTrashAlt","App","header_Header","Container_default","tasks_Tasks","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd3fd64b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass Header extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Brand>\n                        <FontAwesomeIcon icon=\"check-circle\" size=\"lg\" /> Reluviaris Tarefas\n                    </Navbar.Brand>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass List extends Component {\n    async deleteTask(task) {\n        if (window.confirm(`Are you sure you want to delete: \"${task.title}\"`)) {\n            await fetch(`https://reluviaris-task-manager-api.herokuapp.com/tasks/${task.id}`, { method: 'DELETE' });\n            this.props.loadTasks();\n        }\n    }\n    async checkTask(task) {\n        let form = { 'task': { 'done': 'true' } }\n        await fetch(`https://reluviaris-task-manager-api.herokuapp.com/tasks/${task.id}`,\n            {\n                method: 'PUT',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    task: { done: true }\n                })\n            }\n        )\n\n        this.props.loadTasks();\n    }\n    render() {\n        return (\n            <div>\n                <Card>\n                    <Card.Body>\n                        <Table responsive>\n                            <tbody>\n                                {this.props.tasks.map((task, index) => {\n                                    return <tr key={task.id}>\n                                        <td className=\"col-md-10\">{task.title}</td>\n                                        <td>\n                                            { task.done == false ? <a className=\"check\" href=\"#\"><FontAwesomeIcon icon=\"check-circle\" onClick={() => this.checkTask(task)} size=\"lg\" /></a> : null }\n                                        </td>\n                                        <td>\n                                            <a className=\"delete\" href=\"#\" onClick={() => this.deleteTask(task)}>\n                                                <FontAwesomeIcon icon=\"trash-alt\" />\n                                            </a>\n                                        </td>\n                                    </tr>;\n                                })}\n                            </tbody>\n                        </Table>\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default List;","import React, { useState } from \"react\";\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nfunction CreateTask(props) {\n    const [title, setTitle] = useState('');\n    const [show, setShow]   = useState('');\n\n    const handleSubmit = (async () => {\n        await fetch(`https://reluviaris-task-manager-api.herokuapp.com/tasks`,\n            {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    task: { title: title, done: false }\n                })\n            }\n        )\n        setShow(false)\n        setTitle('')\n        props.loadTasks();\n    });\n\n    return (\n        <div>\n            <Button onClick={e => setShow(true)} variant=\"dark\" className=\"float-right create_task_btn\">+ Tarefas</Button>\n\n            <Modal show={show || false} onHide={e => setShow(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Nova Tarefa</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Control type=\"text\" placeholder=\"Digite sua nova tarefa...\" value={title || ''} onChange={e => setTitle(e.target.value)} />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={e => setShow(false)}>\n                        Fechar\n                    </Button>\n                    <form onSubmit={handleSubmit}>\n                        <Button variant=\"dark\" type=\"submit\">\n                            Adicionar\n                        </Button>\n                    </form>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n}\n\nexport default CreateTask;","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport List from './list/List';\nimport CreateTask from './create_tasks/CreateTasks';\nimport Button from 'react-bootstrap/Button';\n\n\nclass Tasks extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: []\n        };\n        this.loadTasks = this.loadTasks.bind(this);\n    }\n\n    async loadTasks() {\n        let response = await fetch(`https://reluviaris-task-manager-api.herokuapp.com/tasks`);\n        const tasks = await response.json();\n        this.setState({ tasks: tasks });\n    }\n\n    componentDidMount() {\n        this.loadTasks();\n    }\n\n    render() {\n        return (\n            <Row>\n                <Col xs={{ span: 8, offset: 2 }} className=\"tasks_list\">\n                    <p className=\"title\">Para fazer</p>\n                    <List loadTasks={this.loadTasks} tasks={this.state.tasks.filter((task) => task.done != true)} />\n                    <CreateTask loadTasks={this.loadTasks} />\n                </Col>\n                <Col xs={{ span: 8, offset: 2 }} className=\"tasks_list\">\n                    <p className=\"title\">Realizadas</p>\n                    <List loadTasks={this.loadTasks} tasks={this.state.tasks.filter((task) => task.done == true)} />\n                    <Button variant=\"dark\" className=\"float-right remove_tasks_btn\">Remover todas as tarefas</Button>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default Tasks;","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheckCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nimport Header from './components/header/Header';\nimport Tasks from './components/tasks/Tasks';\n\nimport './App.scss';\n\nlibrary.add(faCheckCircle, faTrashAlt)\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Header />\n                <Container>\n                    <Tasks />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}